#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

warn() {
  while read line ; do
    [ -z "${line:-}" ] || cat <<<"${file:+${file}: }${line}" 1>&2
  done <<<"$([ "$#" = 0 ] && cat || cat <<<"$*")"
}

die () {
  warn "$@"
  exit 1
}

not() {
  ( "$@" ) && return 1 || return 0
}

check() {
  local -a cmd=("$@")
  local tmpfile="$(mktemp)"

  local -i rt_code=0
  command "${cmd[@]}" 1>"${tmpfile}" 2>&1 || rt_code=$?

  [ "${rt_code}" = 0 ] || warn < "${tmpfile}"
  rm -f -- "${tmpfile}"

  return $rt_code
}

shebang() {
  local -a interpreter
  read -a interpreter <<<"$(head -2 -- "$file" | grep '^#!' | head -1 | sed -e 's/^..//' -e 's/[;#].*//')"

  if [ -f "${interpreter[0]}" ] && [ -x "${interpreter[0]}" ] ; then
    echo "${interpreter[@]}"
  else
    warn "${interpreter[0]} not found."
  fi
}

check_perlscript() {
  local -a interpreter=($(shebang))
  [ "${#interpreter[@]}" -gt 0 ] || interpreter=("$(which perl)")

  check "${interpreter[@]}" -c -- "${file}"
}

check_puppetscript() {
  which 1>/dev/null 2>/dev/null puppet || { warn "Install puppet to check puppet scripts like $file" ; return 0 ; }

  check puppet parser validate -- "$file"
}

check_shellscript() {
  local -a interpreter="$(shebang)"
  [ "${#interpreter[@]}" -gt 0 ] || return 0

  check "${interpreter[@]}" -n  -- "${file}"
}

declare opts=""
opts="$(getopt --options a,h --longoptions all,help --name "$(basename "$0")" -- "$@")"
eval set -- "$opts"

declare -a files=()
declare -A option=()

while [ "$1" != -- ] ; do
  case "$1" in
    -a|--all)
      option["all"]=1
    ;;
    -h|--help)
      die <<-END
				Syntax: $(basename "$0") [<options>]
				Where options are
				  -a|--all      check all files found, not only those about to be committed
				  -h|--help     show this help
			END
    ;;
  esac
  shift
done
shift

files+=("$@")

while read file ; do
  files+=("$file")
done <<<"$([ -n "${option[all]:-}" ] && find . -type f \! -path \*/.git/\* || git diff --cached --name-only --diff-filter=AM)"

declare rt_code=0
for file in "${files[@]}" ; do
  [ -f "${file}" ] || continue

  set -o errexit
  set -o pipefail
  set -o nounset

  declare basename="$(basename "$file")"
  declare suffix="${basename##*.}"
  [ "$suffix" != "$basename" ] || suffix=""
  declare filetype="$(file --brief --mime-type -- "$file")"

  case "$filetype" in
    text/*shellscript)
      check_shellscript || rt_code=$?
    ;;
    text/*perl)
      check_perlscript|| rt_code=$?
    ;;
    text/*)
      case "${suffix:-}" in
        pp)
          check_puppetscript || rt_code=$?
        ;;
        *)
          warn "unsupported suffix $suffix not checked."
        ;;
      esac
    ;;
    *)
      warn "unsupported filetype $filetype not checked."
    ;;
  esac
done
unset file

if [ "$rt_code" != 0 ] ; then
  warn <<-END
		 
		When you think this is an error or you really want to commit, try
		  git commit --no-validate ...
	END
fi

exit $rt_code
